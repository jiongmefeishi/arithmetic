package cn.zqtao.code.leetcode.sort;

import java.util.Arrays;

/**
 * @auther: zqtao
 * @description: 直接插入排序
 * 直接插入排序基本思想：
 *      是每一步将一个待排序的记录，插入到前面已经排好序的有序序列中去，直到插完所有元素为止。
 *      插入到有序序列时，从后向前查找位置进行插入。
 *
 * 举例：数组  int[] arr = {3, 1, 4, 2, 7};
 *
 * -------------------------------------------------------
 *
 * 第一趟排序： 原始数据：3  1  4  2  7
 *
* 有序数据 {3} ，待排序元素  { ( 1 )  4  2  7 }  待插入元素 1
 *
 *
 * 排序结果：{1  3}  {4  2  7}
 *
 * -------------------------------------------------------
 *
 *
 * -------------------------------------------------------
 *
 * 第二趟排序：
 *
 * 有序数据 {1  3} ，待排序元素  { （4）  2  7}  待插入元素 4
 *
 *
 * 排序结果：{1  3  4}  {2  7}
 *
 * -------------------------------------------------------
 *
 *
 * -------------------------------------------------------
 *
 * 第三趟排序：
 *
 * 有序数据 {1  3  4}  ，待排序元素  { （2）  7}  待插入元素 2
 *
 *
 * 排序结果：{1  2  3  4}  { 7}
 *
 * -------------------------------------------------------
 *
 *
 * -------------------------------------------------------
 *
 * 第四趟排序：
 *
 * 有序数据 {1  2  3  4}  ，待排序元素  {  （ 7 ）}  待插入元素 7
 *
 *
 * 排序结果：{1  2  3  4  7}
 *
 * -------------------------------------------------------
 *
 * @version: 1.0
 */
public class InsertionSort {
    public static void main(String[] args) {

        int[] arr = {9, 3, 1, 4, 2, 7, 8, 6, 5};
        System.out.println(Arrays.toString(insertionSort(arr)));
    }

    /**
     * 时间复杂度o(n * n)
     * @param arr
     * @return
     */
    public static int[] insertionSort(int[] arr){
        if (arr == null || arr.length == 0) return new int[0];

        // 外层循环控制插入元素趟数
        for (int i = 0; i < arr.length - 1; i++) {
            // 待插入下标
            int j = i + 1;
            // 内层循环控制寻找出入位置
            while (j > 0 && arr[j] < arr[j - 1]){
                swap(arr, j, j - 1);
                j--;
            }
        }

        return arr;
    }

    public static void swap(int[] arr, int a, int b){
        int tmp = arr[a];
        arr[a] = arr[b];
        arr[b] = tmp;
    }
}
