package cn.zqtao.code.leetcode.sort;

import java.util.Arrays;

/**
 * @auther: zqtao
 * @description: 选择排序
 * <p>
 * 原理：每一趟从待排序的记录中选出最小的元素，顺序放在已排好序的序列最后，直到全部记录排序完毕
 * <p>
 * 即，每一趟在n-1-i (i=0，2，…n-1,n)个记录中选取关键字最小的记录作为有序序列中第i个记录。
 *
 * 举例：数组 int[] arr={5,2,8,4,9,1};
 *
 * -------------------------------------------------------
 *
 * 第一趟排序： 原始数据：5  2  8  4  9  1
 *
 * 最小数据1，把1放在首位，也就是1和5互换位置，
 *
 * 排序结果：1  2  8  4  9  5
 *
 * -------------------------------------------------------
 *
 * 第二趟排序：
 *
 * 第1以外的数据{2  8  4  9  5}进行比较，2最小，
 *
 * 排序结果：1  2  8  4  9  5
 *
 * -------------------------------------------------------
 *
 * 第三趟排序：
 *
 * 除1、2以外的数据{8  4  9  5}进行比较，4最小，8和4交换
 *
 * 排序结果：1  2  4  8  9  5
 *
 * -------------------------------------------------------
 *
 * 第四趟排序：
 *
 * 除第1、2、4以外的其他数据{8  9  5}进行比较，5最小，8和5交换
 *
 * 排序结果：1  2  4  5  9  8
 *
 * -------------------------------------------------------
 *
 * 第五趟排序：
 *
 * 除第1、2、4、5以外的其他数据{9  8}进行比较，8最小，8和9交换
 *
 * 排序结果：1  2  4  5  8  9
 *
 * -------------------------------------------------------
 *
 * 注：每一趟排序获得最小数的方法：for循环进行比较，定义一个第三个变量temp，
 * 首先前两个数比较，把较小的数放在temp中，然后用temp再去跟剩下的数据比较，
 * 如果出现比temp小的数据，就用它代替temp中原有的数据。
 * @version: 1.0
 */
public class SelectionSort {
    public static void main(String[] args) {
        int[] arr = {5, 2, 8, 4, 9, 1};
        System.out.println(Arrays.toString(selectionSort(arr)));
    }

    /**
     * 时间复杂度 n 方
     * 从小到大
     */
    public static int[] selectionSort(int[] arr){

        // 外层循环控制选择排序趟数
        for (int i = 0; i < arr.length - 1; i++) {
            // 假设每趟比较的第一个数为最小数，记录下标
            int min = i;
            // 内层循环，在剩余数中寻找最小的数
            for (int j = i + 1; j < arr.length; j++) {
                if (arr[j] < arr[min])
                    min = j;//记下目前找到的最小值所在的位置
            }
            // 在内层循环结束，也就是找到本轮循环的最小的数以后，再进行交换
            // min 记录为当前趟最小的数的下标，和当前趟的第一个数交换
            if (min != i) // 如果min 不是原值则交换，否则不需要交换
                swap(arr, min, i);
        }
        return arr;
    }

    public static void swap(int[] arr, int a, int b){
        int tmp = arr[a];
        arr[a] = arr[b];
        arr[b] = tmp;
    }
}
